clearvars;clc;[train_data, train_label, validation_data, validation_label, test_data, test_label] = preprocess();  save('dataset.mat', 'train_data', 'train_label', 'validation_data', 'validation_label', 'test_data', 'test_label');load('dataset.mat');n_class = 10;T = zeros(size(train_label, 1), n_class);for i = 1 : n_class    T(:, i) = (train_label == i);end% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Logistic Regression with Gradient Descent*******************% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%options = optimset('MaxIter', 200);W_blr = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);for i = 1 : n_class    objFunction = @(params) blrObjFunction(params, train_data, T(:, i));    [w, ~] = fmincg(objFunction, initialWeights, options);    W_blr(:, i) = w;endpredicted_label = blrPredict(W_blr, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W_blr, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W_blr, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Logistic Regression with Newton-Raphson method**************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)W_blr_Newton = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);n_iter = 5;for i = 1 : n_class    W_blr_Newton(:, i) = blrNewtonRaphsonLearn(initialWeights, train_data, T(:, i), n_iter);endpredicted_label = blrPredict(W_blr_Newton, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W_blr_Newton, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W_blr_Newton, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Gradient Descent *******%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)options = optimset('MaxIter', 200);initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);objFunction = @(params) mlrObjFunction(params, train_data, T);[W_mlr, cost] = fmincg(objFunction, initialWeights, options);W_mlr = reshape(W_mlr, size(train_data, 2) + 1, n_class);    predicted_label = mlrPredict(W_mlr, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = mlrPredict(W_mlr, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = mlrPredict(W_mlr, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Clearing 'dataset.mat' and loading 'newdataset_MLR.mat' for MLR Newton%Raphson method%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%save('params.mat','W_blr','W_blr_Newton','W_mlr');clearvars;load('newdataset_MLR.mat');n_class = 10;T = zeros(size(train_label, 1), n_class);for i = 1 : n_class    T(:, i) = (train_label == i);endload('params.mat');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Newton-Raphson method **%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);n_iter = 5;[W_mlr_Newton] = mlrNewtonRaphsonLearn(initialWeights, train_data, T, n_iter);predicted_label = mlrPredict(W_mlr_Newton, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = mlrPredict(W_mlr_Newton, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = mlrPredict(W_mlr_Newton, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Clearing 'newdataset_MLR.mat' and loading 'newdataset_SVM.mat' for SVM%Classification%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%save('params.mat','W_blr','W_blr_Newton','W_mlr','W_mlr_Newton');clearvars;load('newdataset_SVM.mat');load('params.mat');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Support Vector Machine**************************************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1. Using linear kernel (all other parameters are kept default)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%model_linear = svmtrain (train_label , train_data , '-t 0') ;[predicted_label, accuracy, ~] = svmpredict(train_label , train_data, model_linear);[predicted_label, accuracy, ~] = svmpredict(validation_label , validation_data, model_linear);[predicted_label, accuracy, ~] = svmpredict(test_label , test_data, model_linear);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2.Using radial basis function with value of gamma setting to 1 % (all other parameters are kept default)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% model_rbf_1 = svmtrain (train_label , train_data , '-t 2 -g 1') ;[predicted_label, accuracy, ~] = svmpredict(train_label , train_data, model_rbf_1);[predicted_label, accuracy, ~] = svmpredict(validation_label , validation_data, model_rbf_1);[predicted_label, accuracy, ~] = svmpredict(test_label , test_data, model_rbf_1);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3. Using radial basis function with value of gamma setting% to default (all other parameters are kept default)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% model_rbf_default = svmtrain (train_label , train_data , '-t 2') ;[predicted_label, accuracy, ~] = svmpredict(train_label , train_data, model_rbf_default);[predicted_label, accuracy, ~] = svmpredict(validation_label , validation_data, model_rbf_default);[predicted_label, accuracy, ~] = svmpredict(test_label , test_data, model_rbf_default);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4.	Using radial basis function with value of gamma setting % to default and varying value of C (1;10;20;30; ..;100)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%for i = 0:10:100    z = i;  if(i == 0)      z = i+1;      z         params = sprintf('-t 2 -c %d',z);  else      i      params = sprintf('-t 2 -c %d',i);  end  model_rbf_C = svmtrain (train_label , train_data , params) ;[predicted_label, accuracy, ~] = svmpredict(train_label , train_data, model_rbf_C);[predicted_label, accuracy, ~] = svmpredict(validation_label , validation_data, model_rbf_C);[predicted_label, accuracy, ~] = svmpredict(test_label , test_data, model_rbf_C); end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Best SVM model obtained when using radial basis function % with C = 80%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% model_rbf_C = svmtrain (train_label , train_data , '-t 2 -c 80') ;[predicted_label, accuracy, ~] = svmpredict(train_label , train_data, model_rbf_C);[predicted_label, accuracy, ~] = svmpredict(validation_label , validation_data, model_rbf_C);[predicted_label, accuracy, ~] = svmpredict(test_label , test_data, model_rbf_C);%Saving all the calculated weight parameters and SVM models in params.matsave('params.mat','W_blr','W_blr_Newton','W_mlr','W_mlr_Newton','model_linear','model_rbf_1','model_rbf_default','model_rbf_C');